// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FleetHardwareProfiles fleet hardware profiles
// swagger:model FleetHardwareProfiles
type FleetHardwareProfiles struct {

	// hardware profiles
	// Required: true
	HardwareProfiles []*FleetHardwareProfilesHardwareProfilesItems0 `json:"hardwareProfiles"`

	// next token
	NextToken string `json:"nextToken,omitempty"`
}

// Validate validates this fleet hardware profiles
func (m *FleetHardwareProfiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardwareProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetHardwareProfiles) validateHardwareProfiles(formats strfmt.Registry) error {

	if err := validate.Required("hardwareProfiles", "body", m.HardwareProfiles); err != nil {
		return err
	}

	for i := 0; i < len(m.HardwareProfiles); i++ {
		if swag.IsZero(m.HardwareProfiles[i]) { // not required
			continue
		}

		if m.HardwareProfiles[i] != nil {
			if err := m.HardwareProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardwareProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetHardwareProfiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetHardwareProfiles) UnmarshalBinary(b []byte) error {
	var res FleetHardwareProfiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FleetHardwareProfilesHardwareProfilesItems0 fleet hardware profiles hardware profiles items0
// swagger:model FleetHardwareProfilesHardwareProfilesItems0
type FleetHardwareProfilesHardwareProfilesItems0 struct {

	// href
	// Required: true
	Href *string `json:"href"`
}

// Validate validates this fleet hardware profiles hardware profiles items0
func (m *FleetHardwareProfilesHardwareProfilesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetHardwareProfilesHardwareProfilesItems0) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("href", "body", m.Href); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetHardwareProfilesHardwareProfilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetHardwareProfilesHardwareProfilesItems0) UnmarshalBinary(b []byte) error {
	var res FleetHardwareProfilesHardwareProfilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
