// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FleetSoftwareProfile fleet software profile
// swagger:model FleetSoftwareProfile
type FleetSoftwareProfile struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// software
	// Required: true
	Software []*FleetSoftwareProfileSoftwareItems0 `json:"software"`
}

// Validate validates this fleet software profile
func (m *FleetSoftwareProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftware(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetSoftwareProfile) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FleetSoftwareProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FleetSoftwareProfile) validateSoftware(formats strfmt.Registry) error {

	if err := validate.Required("software", "body", m.Software); err != nil {
		return err
	}

	for i := 0; i < len(m.Software); i++ {
		if swag.IsZero(m.Software[i]) { // not required
			continue
		}

		if m.Software[i] != nil {
			if err := m.Software[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetSoftwareProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetSoftwareProfile) UnmarshalBinary(b []byte) error {
	var res FleetSoftwareProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FleetSoftwareProfileSoftwareItems0 fleet software profile software items0
// swagger:model FleetSoftwareProfileSoftwareItems0
type FleetSoftwareProfileSoftwareItems0 struct {

	// package
	// Required: true
	Package *FleetSoftwareProfileSoftwareItems0Package `json:"package"`

	// version
	// Required: true
	Version *FleetSoftwareProfileSoftwareItems0Version `json:"version"`
}

// Validate validates this fleet software profile software items0
func (m *FleetSoftwareProfileSoftwareItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0) validatePackage(formats strfmt.Registry) error {

	if err := validate.Required("package", "body", m.Package); err != nil {
		return err
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetSoftwareProfileSoftwareItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetSoftwareProfileSoftwareItems0) UnmarshalBinary(b []byte) error {
	var res FleetSoftwareProfileSoftwareItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FleetSoftwareProfileSoftwareItems0Package fleet software profile software items0 package
// swagger:model FleetSoftwareProfileSoftwareItems0Package
type FleetSoftwareProfileSoftwareItems0Package struct {

	// href
	// Required: true
	Href *string `json:"href"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this fleet software profile software items0 package
func (m *FleetSoftwareProfileSoftwareItems0Package) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0Package) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("package"+"."+"href", "body", m.Href); err != nil {
		return err
	}

	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0Package) validateID(formats strfmt.Registry) error {

	if err := validate.Required("package"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0Package) validateName(formats strfmt.Registry) error {

	if err := validate.Required("package"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetSoftwareProfileSoftwareItems0Package) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetSoftwareProfileSoftwareItems0Package) UnmarshalBinary(b []byte) error {
	var res FleetSoftwareProfileSoftwareItems0Package
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FleetSoftwareProfileSoftwareItems0Version fleet software profile software items0 version
// swagger:model FleetSoftwareProfileSoftwareItems0Version
type FleetSoftwareProfileSoftwareItems0Version struct {

	// href
	// Required: true
	Href *string `json:"href"`

	// id
	// Required: true
	ID *string `json:"id"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this fleet software profile software items0 version
func (m *FleetSoftwareProfileSoftwareItems0Version) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0Version) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("version"+"."+"href", "body", m.Href); err != nil {
		return err
	}

	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0Version) validateID(formats strfmt.Registry) error {

	if err := validate.Required("version"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0Version) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("version"+"."+"platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *FleetSoftwareProfileSoftwareItems0Version) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version"+"."+"version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetSoftwareProfileSoftwareItems0Version) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetSoftwareProfileSoftwareItems0Version) UnmarshalBinary(b []byte) error {
	var res FleetSoftwareProfileSoftwareItems0Version
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
