// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Config config
// swagger:model Config
type Config struct {

	// drivers
	// Required: true
	Drivers []*ConfigDriversItems0 `json:"drivers"`

	// hardware layers
	// Required: true
	HardwareLayers []*ConfigHardwareLayersItems0 `json:"hardwareLayers"`

	// jpos entries
	// Required: true
	JposEntries *ConfigJposEntries `json:"jposEntries"`

	// jpos paths
	// Required: true
	JposPaths *ConfigJposPaths `json:"jposPaths"`

	// software
	// Required: true
	Software []*ConfigSoftwareItems0 `json:"software"`

	// system
	// Required: true
	System *ConfigSystem `json:"system"`
}

// Validate validates this config
func (m *Config) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDrivers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJposEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJposPaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Config) validateDrivers(formats strfmt.Registry) error {

	if err := validate.Required("drivers", "body", m.Drivers); err != nil {
		return err
	}

	for i := 0; i < len(m.Drivers); i++ {
		if swag.IsZero(m.Drivers[i]) { // not required
			continue
		}

		if m.Drivers[i] != nil {
			if err := m.Drivers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("drivers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Config) validateHardwareLayers(formats strfmt.Registry) error {

	if err := validate.Required("hardwareLayers", "body", m.HardwareLayers); err != nil {
		return err
	}

	for i := 0; i < len(m.HardwareLayers); i++ {
		if swag.IsZero(m.HardwareLayers[i]) { // not required
			continue
		}

		if m.HardwareLayers[i] != nil {
			if err := m.HardwareLayers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardwareLayers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Config) validateJposEntries(formats strfmt.Registry) error {

	if err := validate.Required("jposEntries", "body", m.JposEntries); err != nil {
		return err
	}

	if m.JposEntries != nil {
		if err := m.JposEntries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jposEntries")
			}
			return err
		}
	}

	return nil
}

func (m *Config) validateJposPaths(formats strfmt.Registry) error {

	if err := validate.Required("jposPaths", "body", m.JposPaths); err != nil {
		return err
	}

	if m.JposPaths != nil {
		if err := m.JposPaths.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jposPaths")
			}
			return err
		}
	}

	return nil
}

func (m *Config) validateSoftware(formats strfmt.Registry) error {

	if err := validate.Required("software", "body", m.Software); err != nil {
		return err
	}

	for i := 0; i < len(m.Software); i++ {
		if swag.IsZero(m.Software[i]) { // not required
			continue
		}

		if m.Software[i] != nil {
			if err := m.Software[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Config) validateSystem(formats strfmt.Registry) error {

	if err := validate.Required("system", "body", m.System); err != nil {
		return err
	}

	if m.System != nil {
		if err := m.System.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Config) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Config) UnmarshalBinary(b []byte) error {
	var res Config
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigDriversItems0 config drivers items0
// swagger:model ConfigDriversItems0
type ConfigDriversItems0 struct {

	// driver Url
	// Required: true
	DriverURL *string `json:"driverUrl"`

	// package name
	// Required: true
	PackageName *string `json:"packageName"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this config drivers items0
func (m *ConfigDriversItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDriverURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigDriversItems0) validateDriverURL(formats strfmt.Registry) error {

	if err := validate.Required("driverUrl", "body", m.DriverURL); err != nil {
		return err
	}

	return nil
}

func (m *ConfigDriversItems0) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("packageName", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

func (m *ConfigDriversItems0) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigDriversItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigDriversItems0) UnmarshalBinary(b []byte) error {
	var res ConfigDriversItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigHardwareLayersItems0 config hardware layers items0
// swagger:model ConfigHardwareLayersItems0
type ConfigHardwareLayersItems0 struct {

	// jpos logical name
	// Required: true
	JposLogicalName *string `json:"jposLogicalName"`

	// layer
	// Required: true
	Layer *string `json:"layer"`

	// port
	// Required: true
	Port *string `json:"port"`
}

// Validate validates this config hardware layers items0
func (m *ConfigHardwareLayersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJposLogicalName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigHardwareLayersItems0) validateJposLogicalName(formats strfmt.Registry) error {

	if err := validate.Required("jposLogicalName", "body", m.JposLogicalName); err != nil {
		return err
	}

	return nil
}

func (m *ConfigHardwareLayersItems0) validateLayer(formats strfmt.Registry) error {

	if err := validate.Required("layer", "body", m.Layer); err != nil {
		return err
	}

	return nil
}

func (m *ConfigHardwareLayersItems0) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigHardwareLayersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigHardwareLayersItems0) UnmarshalBinary(b []byte) error {
	var res ConfigHardwareLayersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigJposEntries config jpos entries
// swagger:model ConfigJposEntries
type ConfigJposEntries struct {

	// xml Url
	XMLURL string `json:"xmlUrl,omitempty"`
}

// Validate validates this config jpos entries
func (m *ConfigJposEntries) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigJposEntries) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigJposEntries) UnmarshalBinary(b []byte) error {
	var res ConfigJposEntries
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigJposPaths config jpos paths
// swagger:model ConfigJposPaths
type ConfigJposPaths struct {

	// properties Url
	PropertiesURL string `json:"propertiesUrl,omitempty"`
}

// Validate validates this config jpos paths
func (m *ConfigJposPaths) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigJposPaths) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigJposPaths) UnmarshalBinary(b []byte) error {
	var res ConfigJposPaths
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigSoftwareItems0 config software items0
// swagger:model ConfigSoftwareItems0
type ConfigSoftwareItems0 struct {

	// package name
	// Required: true
	PackageName *string `json:"packageName"`

	// properties
	// Required: true
	Properties map[string]string `json:"properties"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this config software items0
func (m *ConfigSoftwareItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigSoftwareItems0) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("packageName", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

func (m *ConfigSoftwareItems0) validateProperties(formats strfmt.Registry) error {

	return nil
}

func (m *ConfigSoftwareItems0) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigSoftwareItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigSoftwareItems0) UnmarshalBinary(b []byte) error {
	var res ConfigSoftwareItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigSystem config system
// swagger:model ConfigSystem
type ConfigSystem struct {

	// properties Url
	PropertiesURL string `json:"propertiesUrl,omitempty"`
}

// Validate validates this config system
func (m *ConfigSystem) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigSystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigSystem) UnmarshalBinary(b []byte) error {
	var res ConfigSystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
