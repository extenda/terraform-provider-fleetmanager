// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FleetWorkstation fleet workstation
// swagger:model FleetWorkstation
type FleetWorkstation struct {

	// hardware profile
	HardwareProfile *FleetWorkstationHardwareProfile `json:"hardwareProfile,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// jpos entries Xml Url
	JposEntriesXMLURL string `json:"jposEntriesXmlUrl,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// software profile
	SoftwareProfile *FleetWorkstationSoftwareProfile `json:"softwareProfile,omitempty"`

	// system properties Url
	SystemPropertiesURL string `json:"systemPropertiesUrl,omitempty"`
}

// Validate validates this fleet workstation
func (m *FleetWorkstation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardwareProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetWorkstation) validateHardwareProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.HardwareProfile) { // not required
		return nil
	}

	if m.HardwareProfile != nil {
		if err := m.HardwareProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardwareProfile")
			}
			return err
		}
	}

	return nil
}

func (m *FleetWorkstation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FleetWorkstation) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FleetWorkstation) validateSoftwareProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.SoftwareProfile) { // not required
		return nil
	}

	if m.SoftwareProfile != nil {
		if err := m.SoftwareProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softwareProfile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetWorkstation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetWorkstation) UnmarshalBinary(b []byte) error {
	var res FleetWorkstation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FleetWorkstationHardwareProfile fleet workstation hardware profile
// swagger:model FleetWorkstationHardwareProfile
type FleetWorkstationHardwareProfile struct {

	// href
	// Required: true
	Href *string `json:"href"`
}

// Validate validates this fleet workstation hardware profile
func (m *FleetWorkstationHardwareProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetWorkstationHardwareProfile) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("hardwareProfile"+"."+"href", "body", m.Href); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetWorkstationHardwareProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetWorkstationHardwareProfile) UnmarshalBinary(b []byte) error {
	var res FleetWorkstationHardwareProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FleetWorkstationSoftwareProfile fleet workstation software profile
// swagger:model FleetWorkstationSoftwareProfile
type FleetWorkstationSoftwareProfile struct {

	// href
	// Required: true
	Href *string `json:"href"`
}

// Validate validates this fleet workstation software profile
func (m *FleetWorkstationSoftwareProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetWorkstationSoftwareProfile) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("softwareProfile"+"."+"href", "body", m.Href); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetWorkstationSoftwareProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetWorkstationSoftwareProfile) UnmarshalBinary(b []byte) error {
	var res FleetWorkstationSoftwareProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
