// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UnlinkFleetSoftwareProfile2SoftwareVersion unlink fleet software profile2 software version
// swagger:model UnlinkFleetSoftwareProfile2SoftwareVersion
type UnlinkFleetSoftwareProfile2SoftwareVersion struct {

	// software version
	// Required: true
	SoftwareVersion *UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion `json:"softwareVersion"`
}

// Validate validates this unlink fleet software profile2 software version
func (m *UnlinkFleetSoftwareProfile2SoftwareVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSoftwareVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnlinkFleetSoftwareProfile2SoftwareVersion) validateSoftwareVersion(formats strfmt.Registry) error {

	if err := validate.Required("softwareVersion", "body", m.SoftwareVersion); err != nil {
		return err
	}

	if m.SoftwareVersion != nil {
		if err := m.SoftwareVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softwareVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnlinkFleetSoftwareProfile2SoftwareVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnlinkFleetSoftwareProfile2SoftwareVersion) UnmarshalBinary(b []byte) error {
	var res UnlinkFleetSoftwareProfile2SoftwareVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion unlink fleet software profile2 software version software version
// swagger:model UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion
type UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion struct {

	// package Id
	// Required: true
	PackageID *string `json:"packageId"`

	// version Id
	// Required: true
	VersionID *string `json:"versionId"`
}

// Validate validates this unlink fleet software profile2 software version software version
func (m *UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion) validatePackageID(formats strfmt.Registry) error {

	if err := validate.Required("softwareVersion"+"."+"packageId", "body", m.PackageID); err != nil {
		return err
	}

	return nil
}

func (m *UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("softwareVersion"+"."+"versionId", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion) UnmarshalBinary(b []byte) error {
	var res UnlinkFleetSoftwareProfile2SoftwareVersionSoftwareVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
