// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryModel inventory model
// swagger:model InventoryModel
type InventoryModel struct {

	// drivers
	// Required: true
	Drivers []*InventoryModelDriversItems0 `json:"drivers"`

	// id
	// Required: true
	ID *string `json:"id"`

	// jpos entries Xml s3 Url
	JposEntriesXMLS3URL string `json:"jposEntriesXmlS3Url,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this inventory model
func (m *InventoryModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDrivers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryModel) validateDrivers(formats strfmt.Registry) error {

	if err := validate.Required("drivers", "body", m.Drivers); err != nil {
		return err
	}

	for i := 0; i < len(m.Drivers); i++ {
		if swag.IsZero(m.Drivers[i]) { // not required
			continue
		}

		if m.Drivers[i] != nil {
			if err := m.Drivers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("drivers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryModel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InventoryModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *InventoryModel) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryModel) UnmarshalBinary(b []byte) error {
	var res InventoryModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InventoryModelDriversItems0 inventory model drivers items0
// swagger:model InventoryModelDriversItems0
type InventoryModelDriversItems0 struct {

	// href
	// Required: true
	Href *string `json:"href"`

	// package name
	// Required: true
	PackageName *string `json:"packageName"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this inventory model drivers items0
func (m *InventoryModelDriversItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryModelDriversItems0) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("href", "body", m.Href); err != nil {
		return err
	}

	return nil
}

func (m *InventoryModelDriversItems0) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("packageName", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

func (m *InventoryModelDriversItems0) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *InventoryModelDriversItems0) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryModelDriversItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryModelDriversItems0) UnmarshalBinary(b []byte) error {
	var res InventoryModelDriversItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
