// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDriverVersion create driver version
// swagger:model CreateDriverVersion
type CreateDriverVersion struct {

	// platform
	// Required: true
	// Enum: [enterprise-linux windows]
	Platform *string `json:"platform"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this create driver version
func (m *CreateDriverVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createDriverVersionTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enterprise-linux","windows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createDriverVersionTypePlatformPropEnum = append(createDriverVersionTypePlatformPropEnum, v)
	}
}

const (

	// CreateDriverVersionPlatformEnterpriseLinux captures enum value "enterprise-linux"
	CreateDriverVersionPlatformEnterpriseLinux string = "enterprise-linux"

	// CreateDriverVersionPlatformWindows captures enum value "windows"
	CreateDriverVersionPlatformWindows string = "windows"
)

// prop value enum
func (m *CreateDriverVersion) validatePlatformEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createDriverVersionTypePlatformPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateDriverVersion) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	// value enum
	if err := m.validatePlatformEnum("platform", "body", *m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *CreateDriverVersion) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDriverVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDriverVersion) UnmarshalBinary(b []byte) error {
	var res CreateDriverVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
