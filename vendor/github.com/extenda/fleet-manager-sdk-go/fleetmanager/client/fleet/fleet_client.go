// Code generated by go-swagger; DO NOT EDIT.

package fleet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fleet API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fleet API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateBrand creates fleet brand
*/
func (a *Client) CreateBrand(params *CreateBrandParams) (*CreateBrandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBrand",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBrandCreated), nil

}

/*
CreateCountry creates fleet country
*/
func (a *Client) CreateCountry(params *CreateCountryParams) (*CreateCountryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCountryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCountry",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCountryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCountryCreated), nil

}

/*
CreateHardwareProfileForBrand creates fleet hardware profile
*/
func (a *Client) CreateHardwareProfileForBrand(params *CreateHardwareProfileForBrandParams) (*CreateHardwareProfileForBrandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHardwareProfileForBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHardwareProfileForBrand",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHardwareProfileForBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHardwareProfileForBrandCreated), nil

}

/*
CreateSoftwareProfileForBrand creates fleet software profile
*/
func (a *Client) CreateSoftwareProfileForBrand(params *CreateSoftwareProfileForBrandParams) (*CreateSoftwareProfileForBrandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSoftwareProfileForBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSoftwareProfileForBrand",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/softwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSoftwareProfileForBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSoftwareProfileForBrandCreated), nil

}

/*
CreateStore creates fleet store
*/
func (a *Client) CreateStore(params *CreateStoreParams) (*CreateStoreCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStore",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStoreCreated), nil

}

/*
CreateTenant creates fleet tenant
*/
func (a *Client) CreateTenant(params *CreateTenantParams) (*CreateTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenant",
		Method:             "POST",
		PathPattern:        "/fleet/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTenantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTenantCreated), nil

}

/*
CreateWorkstation creates fleet workstation
*/
func (a *Client) CreateWorkstation(params *CreateWorkstationParams) (*CreateWorkstationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkstationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorkstation",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWorkstationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWorkstationCreated), nil

}

/*
DeleteBrand deletes fleet brand
*/
func (a *Client) DeleteBrand(params *DeleteBrandParams) (*DeleteBrandNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBrand",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBrandNoContent), nil

}

/*
DeleteBrandSystemProperties deletes fleet brand system properties
*/
func (a *Client) DeleteBrandSystemProperties(params *DeleteBrandSystemPropertiesParams) (*DeleteBrandSystemPropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBrandSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBrandSystemProperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBrandSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBrandSystemPropertiesNoContent), nil

}

/*
DeleteCountry deletes fleet country
*/
func (a *Client) DeleteCountry(params *DeleteCountryParams) (*DeleteCountryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCountryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCountry",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCountryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCountryNoContent), nil

}

/*
DeleteCountrySystemProperties deletes fleet country system properties
*/
func (a *Client) DeleteCountrySystemProperties(params *DeleteCountrySystemPropertiesParams) (*DeleteCountrySystemPropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCountrySystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCountrySystemProperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCountrySystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCountrySystemPropertiesNoContent), nil

}

/*
DeleteHardwareProfile deletes fleet hardware profile
*/
func (a *Client) DeleteHardwareProfile(params *DeleteHardwareProfileParams) (*DeleteHardwareProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHardwareProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHardwareProfile",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHardwareProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHardwareProfileNoContent), nil

}

/*
DeleteHardwareProfileJposEntries deletes fleet hardware profile j p o s entries XML
*/
func (a *Client) DeleteHardwareProfileJposEntries(params *DeleteHardwareProfileJposEntriesParams) (*DeleteHardwareProfileJposEntriesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHardwareProfileJposEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHardwareProfileJposEntries",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHardwareProfileJposEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHardwareProfileJposEntriesNoContent), nil

}

/*
DeleteHardwareProfileJposPathsProperties deletes fleet hardware profile j p o s paths properties
*/
func (a *Client) DeleteHardwareProfileJposPathsProperties(params *DeleteHardwareProfileJposPathsPropertiesParams) (*DeleteHardwareProfileJposPathsPropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHardwareProfileJposPathsPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHardwareProfileJposPathsProperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/jpospathsproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHardwareProfileJposPathsPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHardwareProfileJposPathsPropertiesNoContent), nil

}

/*
DeleteSoftwareProfile deletes fleet software profile
*/
func (a *Client) DeleteSoftwareProfile(params *DeleteSoftwareProfileParams) (*DeleteSoftwareProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSoftwareProfile",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/softwareprofile/{softwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwareProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSoftwareProfileNoContent), nil

}

/*
DeleteStore deletes fleet store
*/
func (a *Client) DeleteStore(params *DeleteStoreParams) (*DeleteStoreNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStore",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStoreNoContent), nil

}

/*
DeleteStoreSystemProperties deletes fleet store system properties
*/
func (a *Client) DeleteStoreSystemProperties(params *DeleteStoreSystemPropertiesParams) (*DeleteStoreSystemPropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoreSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStoreSystemProperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoreSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStoreSystemPropertiesNoContent), nil

}

/*
DeleteTenant deletes fleet tenant
*/
func (a *Client) DeleteTenant(params *DeleteTenantParams) (*DeleteTenantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTenant",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTenantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTenantNoContent), nil

}

/*
DeleteTenantSystemProperties deletes fleet tenant system properties
*/
func (a *Client) DeleteTenantSystemProperties(params *DeleteTenantSystemPropertiesParams) (*DeleteTenantSystemPropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTenantSystemProperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTenantSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTenantSystemPropertiesNoContent), nil

}

/*
DeleteWorkstation deletes fleet workstation
*/
func (a *Client) DeleteWorkstation(params *DeleteWorkstationParams) (*DeleteWorkstationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkstationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkstation",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkstationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkstationNoContent), nil

}

/*
DeleteWorkstationJposEntries deletes fleet workstation j p o s entries XML
*/
func (a *Client) DeleteWorkstationJposEntries(params *DeleteWorkstationJposEntriesParams) (*DeleteWorkstationJposEntriesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkstationJposEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkstationJposEntries",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkstationJposEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkstationJposEntriesNoContent), nil

}

/*
DeleteWorkstationSystemProperties deletes fleet workstation system properties
*/
func (a *Client) DeleteWorkstationSystemProperties(params *DeleteWorkstationSystemPropertiesParams) (*DeleteWorkstationSystemPropertiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkstationSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkstationSystemProperties",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkstationSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkstationSystemPropertiesNoContent), nil

}

/*
GetBrandByID gets fleet brand details
*/
func (a *Client) GetBrandByID(params *GetBrandByIDParams) (*GetBrandByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBrandByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBrandById",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBrandByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBrandByIDOK), nil

}

/*
GetCountryByID gets fleet country details
*/
func (a *Client) GetCountryByID(params *GetCountryByIDParams) (*GetCountryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCountryByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCountryById",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCountryByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCountryByIDOK), nil

}

/*
GetHardwareProfileByID gets fleet hardware profile details
*/
func (a *Client) GetHardwareProfileByID(params *GetHardwareProfileByIDParams) (*GetHardwareProfileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHardwareProfileByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHardwareProfileById",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHardwareProfileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHardwareProfileByIDOK), nil

}

/*
GetSoftwareProfileByID gets fleet software profile details
*/
func (a *Client) GetSoftwareProfileByID(params *GetSoftwareProfileByIDParams) (*GetSoftwareProfileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwareProfileByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSoftwareProfileById",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/softwareprofile/{softwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwareProfileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSoftwareProfileByIDOK), nil

}

/*
GetStoreByID gets fleet store details
*/
func (a *Client) GetStoreByID(params *GetStoreByIDParams) (*GetStoreByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoreByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoreById",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoreByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoreByIDOK), nil

}

/*
GetTenantByID gets fleet tenant details
*/
func (a *Client) GetTenantByID(params *GetTenantByIDParams) (*GetTenantByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantById",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTenantByIDOK), nil

}

/*
GetWorkstationByID gets fleet workstation details
*/
func (a *Client) GetWorkstationByID(params *GetWorkstationByIDParams) (*GetWorkstationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkstationByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkstationById",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkstationByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkstationByIDOK), nil

}

/*
GetWorkstationConfig gets fleet workstation config
*/
func (a *Client) GetWorkstationConfig(params *GetWorkstationConfigParams) (*GetWorkstationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkstationConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkstationConfig",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkstationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkstationConfigOK), nil

}

/*
LinkHardwareProfileWithInventoryModel links fleet hardware profile with inventory model
*/
func (a *Client) LinkHardwareProfileWithInventoryModel(params *LinkHardwareProfileWithInventoryModelParams) (*LinkHardwareProfileWithInventoryModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkHardwareProfileWithInventoryModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "linkHardwareProfileWithInventoryModel",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/inventorymodel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinkHardwareProfileWithInventoryModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LinkHardwareProfileWithInventoryModelNoContent), nil

}

/*
LinkSoftwareProfileWithSoftwareVersion links fleet software profile with software version
*/
func (a *Client) LinkSoftwareProfileWithSoftwareVersion(params *LinkSoftwareProfileWithSoftwareVersionParams) (*LinkSoftwareProfileWithSoftwareVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkSoftwareProfileWithSoftwareVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "linkSoftwareProfileWithSoftwareVersion",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/softwareprofile/{softwareProfileId}/softwareversion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinkSoftwareProfileWithSoftwareVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LinkSoftwareProfileWithSoftwareVersionNoContent), nil

}

/*
LinkWorkstationWithHardwareProfile links fleet workstation with fleet hardware profile
*/
func (a *Client) LinkWorkstationWithHardwareProfile(params *LinkWorkstationWithHardwareProfileParams) (*LinkWorkstationWithHardwareProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkWorkstationWithHardwareProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "linkWorkstationWithHardwareProfile",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/fleethardwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinkWorkstationWithHardwareProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LinkWorkstationWithHardwareProfileNoContent), nil

}

/*
LinkWorkstationWithSoftwareProfile links fleet workstation with fleet software profile
*/
func (a *Client) LinkWorkstationWithSoftwareProfile(params *LinkWorkstationWithSoftwareProfileParams) (*LinkWorkstationWithSoftwareProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkWorkstationWithSoftwareProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "linkWorkstationWithSoftwareProfile",
		Method:             "POST",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/fleetsoftwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinkWorkstationWithSoftwareProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LinkWorkstationWithSoftwareProfileNoContent), nil

}

/*
ListBrands lists fleet brands
*/
func (a *Client) ListBrands(params *ListBrandsParams) (*ListBrandsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBrandsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listBrands",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBrandsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBrandsOK), nil

}

/*
ListCountries lists fleet countries
*/
func (a *Client) ListCountries(params *ListCountriesParams) (*ListCountriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCountriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCountries",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCountriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCountriesOK), nil

}

/*
ListHardwareProfilesForBrand lists fleet hardware profiles
*/
func (a *Client) ListHardwareProfilesForBrand(params *ListHardwareProfilesForBrandParams) (*ListHardwareProfilesForBrandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHardwareProfilesForBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listHardwareProfilesForBrand",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListHardwareProfilesForBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListHardwareProfilesForBrandOK), nil

}

/*
ListSoftwareProfilesForBrand lists fleet software profiles
*/
func (a *Client) ListSoftwareProfilesForBrand(params *ListSoftwareProfilesForBrandParams) (*ListSoftwareProfilesForBrandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSoftwareProfilesForBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSoftwareProfilesForBrand",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/softwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSoftwareProfilesForBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSoftwareProfilesForBrandOK), nil

}

/*
ListStores lists fleet stores
*/
func (a *Client) ListStores(params *ListStoresParams) (*ListStoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStoresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStores",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStoresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStoresOK), nil

}

/*
ListTenants lists fleet tenants
*/
func (a *Client) ListTenants(params *ListTenantsParams) (*ListTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTenantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTenants",
		Method:             "GET",
		PathPattern:        "/fleet/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTenantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTenantsOK), nil

}

/*
ListWorkstations lists fleet workstations
*/
func (a *Client) ListWorkstations(params *ListWorkstationsParams) (*ListWorkstationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkstationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listWorkstations",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWorkstationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListWorkstationsOK), nil

}

/*
UnlinkHardwareProfileFromInventoryModel unlinks fleet hardware profile from inventory model
*/
func (a *Client) UnlinkHardwareProfileFromInventoryModel(params *UnlinkHardwareProfileFromInventoryModelParams) (*UnlinkHardwareProfileFromInventoryModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkHardwareProfileFromInventoryModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unlinkHardwareProfileFromInventoryModel",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/inventorymodel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkHardwareProfileFromInventoryModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnlinkHardwareProfileFromInventoryModelNoContent), nil

}

/*
UnlinkSoftwareProfileFromSoftwareVersion unlinks fleet software profile from software version
*/
func (a *Client) UnlinkSoftwareProfileFromSoftwareVersion(params *UnlinkSoftwareProfileFromSoftwareVersionParams) (*UnlinkSoftwareProfileFromSoftwareVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkSoftwareProfileFromSoftwareVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unlinkSoftwareProfileFromSoftwareVersion",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/softwareprofile/{softwareProfileId}/softwareversion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkSoftwareProfileFromSoftwareVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnlinkSoftwareProfileFromSoftwareVersionNoContent), nil

}

/*
UnlinkWorkstationFromHardwareProfile unlinks fleet workstation from fleet hardware profile
*/
func (a *Client) UnlinkWorkstationFromHardwareProfile(params *UnlinkWorkstationFromHardwareProfileParams) (*UnlinkWorkstationFromHardwareProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkWorkstationFromHardwareProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unlinkWorkstationFromHardwareProfile",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/fleethardwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkWorkstationFromHardwareProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnlinkWorkstationFromHardwareProfileNoContent), nil

}

/*
UnlinkWorkstationFromSoftwareProfile unlinks fleet workstation from fleet software profile
*/
func (a *Client) UnlinkWorkstationFromSoftwareProfile(params *UnlinkWorkstationFromSoftwareProfileParams) (*UnlinkWorkstationFromSoftwareProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkWorkstationFromSoftwareProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unlinkWorkstationFromSoftwareProfile",
		Method:             "DELETE",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/fleetsoftwareprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkWorkstationFromSoftwareProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnlinkWorkstationFromSoftwareProfileNoContent), nil

}

/*
UpdateBrand updates fleet brand
*/
func (a *Client) UpdateBrand(params *UpdateBrandParams) (*UpdateBrandNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBrandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateBrand",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBrandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateBrandNoContent), nil

}

/*
UpdateCountry updates fleet country
*/
func (a *Client) UpdateCountry(params *UpdateCountryParams) (*UpdateCountryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCountryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCountry",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCountryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCountryNoContent), nil

}

/*
UpdateHardwareProfile updates fleet hardware profile
*/
func (a *Client) UpdateHardwareProfile(params *UpdateHardwareProfileParams) (*UpdateHardwareProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHardwareProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHardwareProfile",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHardwareProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateHardwareProfileNoContent), nil

}

/*
UpdateSoftwareProfile updates fleet software profile
*/
func (a *Client) UpdateSoftwareProfile(params *UpdateSoftwareProfileParams) (*UpdateSoftwareProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSoftwareProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSoftwareProfile",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/softwareprofile/{softwareProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSoftwareProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSoftwareProfileNoContent), nil

}

/*
UpdateStore updates fleet store
*/
func (a *Client) UpdateStore(params *UpdateStoreParams) (*UpdateStoreNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStore",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStoreNoContent), nil

}

/*
UpdateTenant updates fleet tenant
*/
func (a *Client) UpdateTenant(params *UpdateTenantParams) (*UpdateTenantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenant",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateTenantNoContent), nil

}

/*
UpdateWorkstation updates fleet workstation
*/
func (a *Client) UpdateWorkstation(params *UpdateWorkstationParams) (*UpdateWorkstationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkstationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWorkstation",
		Method:             "PUT",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWorkstationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWorkstationNoContent), nil

}

/*
UploadBrandSystemProperties uploads fleet brand system properties
*/
func (a *Client) UploadBrandSystemProperties(params *UploadBrandSystemPropertiesParams) (*UploadBrandSystemPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadBrandSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadBrandSystemProperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadBrandSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadBrandSystemPropertiesOK), nil

}

/*
UploadCountrySystemProperties uploads fleet country system properties
*/
func (a *Client) UploadCountrySystemProperties(params *UploadCountrySystemPropertiesParams) (*UploadCountrySystemPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadCountrySystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadCountrySystemProperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadCountrySystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadCountrySystemPropertiesOK), nil

}

/*
UploadHardwareProfileJposEntries uploads fleet hardware profile j p o s entries XML
*/
func (a *Client) UploadHardwareProfileJposEntries(params *UploadHardwareProfileJposEntriesParams) (*UploadHardwareProfileJposEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadHardwareProfileJposEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadHardwareProfileJposEntries",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadHardwareProfileJposEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadHardwareProfileJposEntriesOK), nil

}

/*
UploadHardwareProfileJposPathsProperties uploads fleet hardware profile j p o s paths properties
*/
func (a *Client) UploadHardwareProfileJposPathsProperties(params *UploadHardwareProfileJposPathsPropertiesParams) (*UploadHardwareProfileJposPathsPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadHardwareProfileJposPathsPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadHardwareProfileJposPathsProperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/hardwareprofile/{hardwareProfileId}/jpospathsproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadHardwareProfileJposPathsPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadHardwareProfileJposPathsPropertiesOK), nil

}

/*
UploadStoreSystemProperties uploads fleet store system properties
*/
func (a *Client) UploadStoreSystemProperties(params *UploadStoreSystemPropertiesParams) (*UploadStoreSystemPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadStoreSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadStoreSystemProperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadStoreSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadStoreSystemPropertiesOK), nil

}

/*
UploadTenantSystemProperties uploads fleet tenant system properties
*/
func (a *Client) UploadTenantSystemProperties(params *UploadTenantSystemPropertiesParams) (*UploadTenantSystemPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadTenantSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadTenantSystemProperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadTenantSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadTenantSystemPropertiesOK), nil

}

/*
UploadWorkstationJposEntries uploads fleet workstation j p o s entries XML
*/
func (a *Client) UploadWorkstationJposEntries(params *UploadWorkstationJposEntriesParams) (*UploadWorkstationJposEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadWorkstationJposEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadWorkstationJposEntries",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadWorkstationJposEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadWorkstationJposEntriesOK), nil

}

/*
UploadWorkstationSystemProperties uploads fleet workstation system properties
*/
func (a *Client) UploadWorkstationSystemProperties(params *UploadWorkstationSystemPropertiesParams) (*UploadWorkstationSystemPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadWorkstationSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadWorkstationSystemProperties",
		Method:             "GET",
		PathPattern:        "/fleet/tenant/{tenantId}/brand/{brandId}/country/{countryId}/store/{storeId}/workstation/{workstationId}/systemproperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadWorkstationSystemPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadWorkstationSystemPropertiesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
