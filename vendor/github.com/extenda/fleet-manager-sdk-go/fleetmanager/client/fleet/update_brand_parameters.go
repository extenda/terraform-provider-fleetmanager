// Code generated by go-swagger; DO NOT EDIT.

package fleet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/extenda/fleet-manager-sdk-go/fleetmanager/models"
)

// NewUpdateBrandParams creates a new UpdateBrandParams object
// with the default values initialized.
func NewUpdateBrandParams() *UpdateBrandParams {
	var ()
	return &UpdateBrandParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateBrandParamsWithTimeout creates a new UpdateBrandParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateBrandParamsWithTimeout(timeout time.Duration) *UpdateBrandParams {
	var ()
	return &UpdateBrandParams{

		timeout: timeout,
	}
}

// NewUpdateBrandParamsWithContext creates a new UpdateBrandParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateBrandParamsWithContext(ctx context.Context) *UpdateBrandParams {
	var ()
	return &UpdateBrandParams{

		Context: ctx,
	}
}

// NewUpdateBrandParamsWithHTTPClient creates a new UpdateBrandParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateBrandParamsWithHTTPClient(client *http.Client) *UpdateBrandParams {
	var ()
	return &UpdateBrandParams{
		HTTPClient: client,
	}
}

/*UpdateBrandParams contains all the parameters to send to the API endpoint
for the update brand operation typically these are written to a http.Request
*/
type UpdateBrandParams struct {

	/*Body*/
	Body *models.UpdateFleetBrand
	/*BrandID*/
	BrandID string
	/*TenantID*/
	TenantID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update brand params
func (o *UpdateBrandParams) WithTimeout(timeout time.Duration) *UpdateBrandParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update brand params
func (o *UpdateBrandParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update brand params
func (o *UpdateBrandParams) WithContext(ctx context.Context) *UpdateBrandParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update brand params
func (o *UpdateBrandParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update brand params
func (o *UpdateBrandParams) WithHTTPClient(client *http.Client) *UpdateBrandParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update brand params
func (o *UpdateBrandParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update brand params
func (o *UpdateBrandParams) WithBody(body *models.UpdateFleetBrand) *UpdateBrandParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update brand params
func (o *UpdateBrandParams) SetBody(body *models.UpdateFleetBrand) {
	o.Body = body
}

// WithBrandID adds the brandID to the update brand params
func (o *UpdateBrandParams) WithBrandID(brandID string) *UpdateBrandParams {
	o.SetBrandID(brandID)
	return o
}

// SetBrandID adds the brandId to the update brand params
func (o *UpdateBrandParams) SetBrandID(brandID string) {
	o.BrandID = brandID
}

// WithTenantID adds the tenantID to the update brand params
func (o *UpdateBrandParams) WithTenantID(tenantID string) *UpdateBrandParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the update brand params
func (o *UpdateBrandParams) SetTenantID(tenantID string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateBrandParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param brandId
	if err := r.SetPathParam("brandId", o.BrandID); err != nil {
		return err
	}

	// path param tenantId
	if err := r.SetPathParam("tenantId", o.TenantID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
