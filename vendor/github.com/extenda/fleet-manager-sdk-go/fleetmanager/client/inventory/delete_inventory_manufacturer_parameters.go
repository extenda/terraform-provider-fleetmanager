// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteInventoryManufacturerParams creates a new DeleteInventoryManufacturerParams object
// with the default values initialized.
func NewDeleteInventoryManufacturerParams() *DeleteInventoryManufacturerParams {
	var ()
	return &DeleteInventoryManufacturerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteInventoryManufacturerParamsWithTimeout creates a new DeleteInventoryManufacturerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteInventoryManufacturerParamsWithTimeout(timeout time.Duration) *DeleteInventoryManufacturerParams {
	var ()
	return &DeleteInventoryManufacturerParams{

		timeout: timeout,
	}
}

// NewDeleteInventoryManufacturerParamsWithContext creates a new DeleteInventoryManufacturerParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteInventoryManufacturerParamsWithContext(ctx context.Context) *DeleteInventoryManufacturerParams {
	var ()
	return &DeleteInventoryManufacturerParams{

		Context: ctx,
	}
}

// NewDeleteInventoryManufacturerParamsWithHTTPClient creates a new DeleteInventoryManufacturerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteInventoryManufacturerParamsWithHTTPClient(client *http.Client) *DeleteInventoryManufacturerParams {
	var ()
	return &DeleteInventoryManufacturerParams{
		HTTPClient: client,
	}
}

/*DeleteInventoryManufacturerParams contains all the parameters to send to the API endpoint
for the delete inventory manufacturer operation typically these are written to a http.Request
*/
type DeleteInventoryManufacturerParams struct {

	/*ManufacturerID*/
	ManufacturerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete inventory manufacturer params
func (o *DeleteInventoryManufacturerParams) WithTimeout(timeout time.Duration) *DeleteInventoryManufacturerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete inventory manufacturer params
func (o *DeleteInventoryManufacturerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete inventory manufacturer params
func (o *DeleteInventoryManufacturerParams) WithContext(ctx context.Context) *DeleteInventoryManufacturerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete inventory manufacturer params
func (o *DeleteInventoryManufacturerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete inventory manufacturer params
func (o *DeleteInventoryManufacturerParams) WithHTTPClient(client *http.Client) *DeleteInventoryManufacturerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete inventory manufacturer params
func (o *DeleteInventoryManufacturerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithManufacturerID adds the manufacturerID to the delete inventory manufacturer params
func (o *DeleteInventoryManufacturerParams) WithManufacturerID(manufacturerID string) *DeleteInventoryManufacturerParams {
	o.SetManufacturerID(manufacturerID)
	return o
}

// SetManufacturerID adds the manufacturerId to the delete inventory manufacturer params
func (o *DeleteInventoryManufacturerParams) SetManufacturerID(manufacturerID string) {
	o.ManufacturerID = manufacturerID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteInventoryManufacturerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param manufacturerId
	if err := r.SetPathParam("manufacturerId", o.ManufacturerID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
