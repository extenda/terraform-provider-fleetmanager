// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new inventory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateInventoryManufacturer creates inventory manufacturer
*/
func (a *Client) CreateInventoryManufacturer(params *CreateInventoryManufacturerParams) (*CreateInventoryManufacturerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInventoryManufacturerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInventoryManufacturer",
		Method:             "POST",
		PathPattern:        "/inventory/manufacturer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInventoryManufacturerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInventoryManufacturerCreated), nil

}

/*
CreateInventoryModel creates inventory model
*/
func (a *Client) CreateInventoryModel(params *CreateInventoryModelParams) (*CreateInventoryModelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInventoryModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInventoryModel",
		Method:             "POST",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInventoryModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInventoryModelCreated), nil

}

/*
DeleteInventoryManufacturer deletes inventory manufacturer
*/
func (a *Client) DeleteInventoryManufacturer(params *DeleteInventoryManufacturerParams) (*DeleteInventoryManufacturerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryManufacturerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInventoryManufacturer",
		Method:             "DELETE",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInventoryManufacturerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInventoryManufacturerNoContent), nil

}

/*
DeleteInventoryModel deletes inventory model
*/
func (a *Client) DeleteInventoryModel(params *DeleteInventoryModelParams) (*DeleteInventoryModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInventoryModel",
		Method:             "DELETE",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model/{modelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInventoryModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInventoryModelNoContent), nil

}

/*
DeleteInventoryModelJposEntries deletes inventory model j p o s entries XML
*/
func (a *Client) DeleteInventoryModelJposEntries(params *DeleteInventoryModelJposEntriesParams) (*DeleteInventoryModelJposEntriesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryModelJposEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInventoryModelJposEntries",
		Method:             "DELETE",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model/{modelId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInventoryModelJposEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInventoryModelJposEntriesNoContent), nil

}

/*
GetInventoryManufacturerByID gets inventory manufacturer details
*/
func (a *Client) GetInventoryManufacturerByID(params *GetInventoryManufacturerByIDParams) (*GetInventoryManufacturerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryManufacturerByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryManufacturerById",
		Method:             "GET",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryManufacturerByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInventoryManufacturerByIDOK), nil

}

/*
GetInventoryModelByID gets inventory model details
*/
func (a *Client) GetInventoryModelByID(params *GetInventoryModelByIDParams) (*GetInventoryModelByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryModelByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryModelById",
		Method:             "GET",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model/{modelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryModelByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInventoryModelByIDOK), nil

}

/*
LinkInventoryModelWithDriverVersion links inventory model with driver version
*/
func (a *Client) LinkInventoryModelWithDriverVersion(params *LinkInventoryModelWithDriverVersionParams) (*LinkInventoryModelWithDriverVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkInventoryModelWithDriverVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "linkInventoryModelWithDriverVersion",
		Method:             "POST",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model/{modelId}/driverversion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinkInventoryModelWithDriverVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LinkInventoryModelWithDriverVersionNoContent), nil

}

/*
ListInventoryManufacturers lists inventory manufacturers
*/
func (a *Client) ListInventoryManufacturers(params *ListInventoryManufacturersParams) (*ListInventoryManufacturersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInventoryManufacturersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listInventoryManufacturers",
		Method:             "GET",
		PathPattern:        "/inventory/manufacturer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInventoryManufacturersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListInventoryManufacturersOK), nil

}

/*
ListInventoryModels lists inventory models
*/
func (a *Client) ListInventoryModels(params *ListInventoryModelsParams) (*ListInventoryModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInventoryModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listInventoryModels",
		Method:             "GET",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInventoryModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListInventoryModelsOK), nil

}

/*
UnlinkInventoryModelFromDriverVersion unlinks inventory model from driver version
*/
func (a *Client) UnlinkInventoryModelFromDriverVersion(params *UnlinkInventoryModelFromDriverVersionParams) (*UnlinkInventoryModelFromDriverVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkInventoryModelFromDriverVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unlinkInventoryModelFromDriverVersion",
		Method:             "DELETE",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model/{modelId}/driverversion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkInventoryModelFromDriverVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnlinkInventoryModelFromDriverVersionNoContent), nil

}

/*
UpdateInventoryManufacturer updates inventory manufacturer
*/
func (a *Client) UpdateInventoryManufacturer(params *UpdateInventoryManufacturerParams) (*UpdateInventoryManufacturerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInventoryManufacturerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInventoryManufacturer",
		Method:             "PUT",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInventoryManufacturerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateInventoryManufacturerNoContent), nil

}

/*
UpdateInventoryModel updates inventory model
*/
func (a *Client) UpdateInventoryModel(params *UpdateInventoryModelParams) (*UpdateInventoryModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInventoryModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInventoryModel",
		Method:             "PUT",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model/{modelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInventoryModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateInventoryModelNoContent), nil

}

/*
UploadInventoryModelJposEntries uploads inventory model j p o s entries XML
*/
func (a *Client) UploadInventoryModelJposEntries(params *UploadInventoryModelJposEntriesParams) (*UploadInventoryModelJposEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadInventoryModelJposEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadInventoryModelJposEntries",
		Method:             "GET",
		PathPattern:        "/inventory/manufacturer/{manufacturerId}/model/{modelId}/jposentriesxml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadInventoryModelJposEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadInventoryModelJposEntriesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
