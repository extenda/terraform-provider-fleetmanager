// Code generated by go-swagger; DO NOT EDIT.

package driver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/extenda/fleet-manager-sdk-go/fleetmanager/models"
)

// UploadDriverBinaryReader is a Reader for the UploadDriverBinary structure.
type UploadDriverBinaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadDriverBinaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUploadDriverBinaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUploadDriverBinaryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUploadDriverBinaryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadDriverBinaryOK creates a UploadDriverBinaryOK with default headers values
func NewUploadDriverBinaryOK() *UploadDriverBinaryOK {
	return &UploadDriverBinaryOK{}
}

/*UploadDriverBinaryOK handles this case with default header values.

OK
*/
type UploadDriverBinaryOK struct {
	Payload *models.S3PresignedPost
}

func (o *UploadDriverBinaryOK) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}/binary][%d] uploadDriverBinaryOK  %+v", 200, o.Payload)
}

func (o *UploadDriverBinaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.S3PresignedPost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadDriverBinaryBadRequest creates a UploadDriverBinaryBadRequest with default headers values
func NewUploadDriverBinaryBadRequest() *UploadDriverBinaryBadRequest {
	return &UploadDriverBinaryBadRequest{}
}

/*UploadDriverBinaryBadRequest handles this case with default header values.

Bad Request
*/
type UploadDriverBinaryBadRequest struct {
	Payload *models.Error
}

func (o *UploadDriverBinaryBadRequest) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}/binary][%d] uploadDriverBinaryBadRequest  %+v", 400, o.Payload)
}

func (o *UploadDriverBinaryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadDriverBinaryNotFound creates a UploadDriverBinaryNotFound with default headers values
func NewUploadDriverBinaryNotFound() *UploadDriverBinaryNotFound {
	return &UploadDriverBinaryNotFound{}
}

/*UploadDriverBinaryNotFound handles this case with default header values.

Not Found
*/
type UploadDriverBinaryNotFound struct {
}

func (o *UploadDriverBinaryNotFound) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}/binary][%d] uploadDriverBinaryNotFound ", 404)
}

func (o *UploadDriverBinaryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
