// Code generated by go-swagger; DO NOT EDIT.

package driver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new driver API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for driver API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDriverPackage creates driver package
*/
func (a *Client) CreateDriverPackage(params *CreateDriverPackageParams) (*CreateDriverPackageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDriverPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDriverPackage",
		Method:             "POST",
		PathPattern:        "/driver/package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDriverPackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDriverPackageCreated), nil

}

/*
CreateDriverVersion creates driver version
*/
func (a *Client) CreateDriverVersion(params *CreateDriverVersionParams) (*CreateDriverVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDriverVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDriverVersion",
		Method:             "POST",
		PathPattern:        "/driver/package/{packageId}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDriverVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDriverVersionCreated), nil

}

/*
DeleteDriverBinary deletes driver binary
*/
func (a *Client) DeleteDriverBinary(params *DeleteDriverBinaryParams) (*DeleteDriverBinaryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDriverBinaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDriverBinary",
		Method:             "DELETE",
		PathPattern:        "/driver/package/{packageId}/version/{versionId}/binary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDriverBinaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDriverBinaryNoContent), nil

}

/*
DeleteDriverPackage deletes driver package
*/
func (a *Client) DeleteDriverPackage(params *DeleteDriverPackageParams) (*DeleteDriverPackageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDriverPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDriverPackage",
		Method:             "DELETE",
		PathPattern:        "/driver/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDriverPackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDriverPackageNoContent), nil

}

/*
DeleteDriverVersion deletes driver version
*/
func (a *Client) DeleteDriverVersion(params *DeleteDriverVersionParams) (*DeleteDriverVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDriverVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDriverVersion",
		Method:             "DELETE",
		PathPattern:        "/driver/package/{packageId}/version/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDriverVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDriverVersionNoContent), nil

}

/*
GetDriverPackageByID gets driver package details
*/
func (a *Client) GetDriverPackageByID(params *GetDriverPackageByIDParams) (*GetDriverPackageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverPackageByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriverPackageById",
		Method:             "GET",
		PathPattern:        "/driver/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDriverPackageByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverPackageByIDOK), nil

}

/*
GetDriverVersionByID gets driver version details
*/
func (a *Client) GetDriverVersionByID(params *GetDriverVersionByIDParams) (*GetDriverVersionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverVersionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriverVersionById",
		Method:             "GET",
		PathPattern:        "/driver/package/{packageId}/version/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDriverVersionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverVersionByIDOK), nil

}

/*
ListDriverPackages lists driver packages
*/
func (a *Client) ListDriverPackages(params *ListDriverPackagesParams) (*ListDriverPackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDriverPackagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDriverPackages",
		Method:             "GET",
		PathPattern:        "/driver/package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDriverPackagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDriverPackagesOK), nil

}

/*
ListDriverVersions lists driver versions
*/
func (a *Client) ListDriverVersions(params *ListDriverVersionsParams) (*ListDriverVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDriverVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDriverVersions",
		Method:             "GET",
		PathPattern:        "/driver/package/{packageId}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDriverVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDriverVersionsOK), nil

}

/*
UpdateDriverPackage updates driver package
*/
func (a *Client) UpdateDriverPackage(params *UpdateDriverPackageParams) (*UpdateDriverPackageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDriverPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDriverPackage",
		Method:             "PUT",
		PathPattern:        "/driver/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDriverPackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDriverPackageNoContent), nil

}

/*
UploadDriverBinary uploads driver binary
*/
func (a *Client) UploadDriverBinary(params *UploadDriverBinaryParams) (*UploadDriverBinaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadDriverBinaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadDriverBinary",
		Method:             "GET",
		PathPattern:        "/driver/package/{packageId}/version/{versionId}/binary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadDriverBinaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadDriverBinaryOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
