// Code generated by go-swagger; DO NOT EDIT.

package driver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/extenda/fleet-manager-sdk-go/fleetmanager/models"
)

// GetDriverVersionByIDReader is a Reader for the GetDriverVersionByID structure.
type GetDriverVersionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDriverVersionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDriverVersionByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetDriverVersionByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDriverVersionByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDriverVersionByIDOK creates a GetDriverVersionByIDOK with default headers values
func NewGetDriverVersionByIDOK() *GetDriverVersionByIDOK {
	return &GetDriverVersionByIDOK{}
}

/*GetDriverVersionByIDOK handles this case with default header values.

OK
*/
type GetDriverVersionByIDOK struct {
	Payload *models.DriverVersion
}

func (o *GetDriverVersionByIDOK) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}][%d] getDriverVersionByIdOK  %+v", 200, o.Payload)
}

func (o *GetDriverVersionByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DriverVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDriverVersionByIDBadRequest creates a GetDriverVersionByIDBadRequest with default headers values
func NewGetDriverVersionByIDBadRequest() *GetDriverVersionByIDBadRequest {
	return &GetDriverVersionByIDBadRequest{}
}

/*GetDriverVersionByIDBadRequest handles this case with default header values.

Bad Request
*/
type GetDriverVersionByIDBadRequest struct {
	Payload *models.Error
}

func (o *GetDriverVersionByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}][%d] getDriverVersionByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetDriverVersionByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDriverVersionByIDNotFound creates a GetDriverVersionByIDNotFound with default headers values
func NewGetDriverVersionByIDNotFound() *GetDriverVersionByIDNotFound {
	return &GetDriverVersionByIDNotFound{}
}

/*GetDriverVersionByIDNotFound handles this case with default header values.

Not Found
*/
type GetDriverVersionByIDNotFound struct {
}

func (o *GetDriverVersionByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /driver/package/{packageId}/version/{versionId}][%d] getDriverVersionByIdNotFound ", 404)
}

func (o *GetDriverVersionByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
