// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/extenda/fleet-manager-sdk-go/fleetmanager/models"
)

// UpdateSoftwarePackageReader is a Reader for the UpdateSoftwarePackage structure.
type UpdateSoftwarePackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSoftwarePackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewUpdateSoftwarePackageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateSoftwarePackageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSoftwarePackageNoContent creates a UpdateSoftwarePackageNoContent with default headers values
func NewUpdateSoftwarePackageNoContent() *UpdateSoftwarePackageNoContent {
	return &UpdateSoftwarePackageNoContent{}
}

/*UpdateSoftwarePackageNoContent handles this case with default header values.

No Content
*/
type UpdateSoftwarePackageNoContent struct {
}

func (o *UpdateSoftwarePackageNoContent) Error() string {
	return fmt.Sprintf("[PUT /software/package/{packageId}][%d] updateSoftwarePackageNoContent ", 204)
}

func (o *UpdateSoftwarePackageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSoftwarePackageBadRequest creates a UpdateSoftwarePackageBadRequest with default headers values
func NewUpdateSoftwarePackageBadRequest() *UpdateSoftwarePackageBadRequest {
	return &UpdateSoftwarePackageBadRequest{}
}

/*UpdateSoftwarePackageBadRequest handles this case with default header values.

Bad Request
*/
type UpdateSoftwarePackageBadRequest struct {
	Payload *models.Error
}

func (o *UpdateSoftwarePackageBadRequest) Error() string {
	return fmt.Sprintf("[PUT /software/package/{packageId}][%d] updateSoftwarePackageBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSoftwarePackageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
