// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new software API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for software API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSoftwarePackage creates software package
*/
func (a *Client) CreateSoftwarePackage(params *CreateSoftwarePackageParams) (*CreateSoftwarePackageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSoftwarePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSoftwarePackage",
		Method:             "POST",
		PathPattern:        "/software/package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSoftwarePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSoftwarePackageCreated), nil

}

/*
CreateSoftwareVersion creates software version
*/
func (a *Client) CreateSoftwareVersion(params *CreateSoftwareVersionParams) (*CreateSoftwareVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSoftwareVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSoftwareVersion",
		Method:             "POST",
		PathPattern:        "/software/package/{packageId}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSoftwareVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSoftwareVersionCreated), nil

}

/*
DeleteSoftwarePackage deletes software package
*/
func (a *Client) DeleteSoftwarePackage(params *DeleteSoftwarePackageParams) (*DeleteSoftwarePackageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwarePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSoftwarePackage",
		Method:             "DELETE",
		PathPattern:        "/software/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwarePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSoftwarePackageNoContent), nil

}

/*
DeleteSoftwareVersion deletes software version
*/
func (a *Client) DeleteSoftwareVersion(params *DeleteSoftwareVersionParams) (*DeleteSoftwareVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSoftwareVersion",
		Method:             "DELETE",
		PathPattern:        "/software/package/{packageId}/version/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwareVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSoftwareVersionNoContent), nil

}

/*
GetSoftwarePackageByID gets software package details
*/
func (a *Client) GetSoftwarePackageByID(params *GetSoftwarePackageByIDParams) (*GetSoftwarePackageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwarePackageByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSoftwarePackageById",
		Method:             "GET",
		PathPattern:        "/software/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwarePackageByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSoftwarePackageByIDOK), nil

}

/*
GetSoftwareVersionByID gets software version details
*/
func (a *Client) GetSoftwareVersionByID(params *GetSoftwareVersionByIDParams) (*GetSoftwareVersionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwareVersionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSoftwareVersionById",
		Method:             "GET",
		PathPattern:        "/software/package/{packageId}/version/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwareVersionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSoftwareVersionByIDOK), nil

}

/*
ListSoftwarePackages lists software packages
*/
func (a *Client) ListSoftwarePackages(params *ListSoftwarePackagesParams) (*ListSoftwarePackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSoftwarePackagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSoftwarePackages",
		Method:             "GET",
		PathPattern:        "/software/package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSoftwarePackagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSoftwarePackagesOK), nil

}

/*
ListSoftwareVersions lists software versions
*/
func (a *Client) ListSoftwareVersions(params *ListSoftwareVersionsParams) (*ListSoftwareVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSoftwareVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSoftwareVersions",
		Method:             "GET",
		PathPattern:        "/software/package/{packageId}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSoftwareVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSoftwareVersionsOK), nil

}

/*
UpdateSoftwarePackage updates software package
*/
func (a *Client) UpdateSoftwarePackage(params *UpdateSoftwarePackageParams) (*UpdateSoftwarePackageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSoftwarePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSoftwarePackage",
		Method:             "PUT",
		PathPattern:        "/software/package/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSoftwarePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSoftwarePackageNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
