// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/extenda/fleet-manager-sdk-go/fleetmanager/models"
)

// DeleteSoftwareVersionReader is a Reader for the DeleteSoftwareVersion structure.
type DeleteSoftwareVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSoftwareVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteSoftwareVersionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteSoftwareVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteSoftwareVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewDeleteSoftwareVersionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteSoftwareVersionNoContent creates a DeleteSoftwareVersionNoContent with default headers values
func NewDeleteSoftwareVersionNoContent() *DeleteSoftwareVersionNoContent {
	return &DeleteSoftwareVersionNoContent{}
}

/*DeleteSoftwareVersionNoContent handles this case with default header values.

No Content
*/
type DeleteSoftwareVersionNoContent struct {
}

func (o *DeleteSoftwareVersionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /software/package/{packageId}/version/{versionId}][%d] deleteSoftwareVersionNoContent ", 204)
}

func (o *DeleteSoftwareVersionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSoftwareVersionBadRequest creates a DeleteSoftwareVersionBadRequest with default headers values
func NewDeleteSoftwareVersionBadRequest() *DeleteSoftwareVersionBadRequest {
	return &DeleteSoftwareVersionBadRequest{}
}

/*DeleteSoftwareVersionBadRequest handles this case with default header values.

Bad Request
*/
type DeleteSoftwareVersionBadRequest struct {
	Payload *models.Error
}

func (o *DeleteSoftwareVersionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /software/package/{packageId}/version/{versionId}][%d] deleteSoftwareVersionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSoftwareVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSoftwareVersionNotFound creates a DeleteSoftwareVersionNotFound with default headers values
func NewDeleteSoftwareVersionNotFound() *DeleteSoftwareVersionNotFound {
	return &DeleteSoftwareVersionNotFound{}
}

/*DeleteSoftwareVersionNotFound handles this case with default header values.

Not Found
*/
type DeleteSoftwareVersionNotFound struct {
}

func (o *DeleteSoftwareVersionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /software/package/{packageId}/version/{versionId}][%d] deleteSoftwareVersionNotFound ", 404)
}

func (o *DeleteSoftwareVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSoftwareVersionUnprocessableEntity creates a DeleteSoftwareVersionUnprocessableEntity with default headers values
func NewDeleteSoftwareVersionUnprocessableEntity() *DeleteSoftwareVersionUnprocessableEntity {
	return &DeleteSoftwareVersionUnprocessableEntity{}
}

/*DeleteSoftwareVersionUnprocessableEntity handles this case with default header values.

Unprocessable Entity
*/
type DeleteSoftwareVersionUnprocessableEntity struct {
}

func (o *DeleteSoftwareVersionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /software/package/{packageId}/version/{versionId}][%d] deleteSoftwareVersionUnprocessableEntity ", 422)
}

func (o *DeleteSoftwareVersionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
