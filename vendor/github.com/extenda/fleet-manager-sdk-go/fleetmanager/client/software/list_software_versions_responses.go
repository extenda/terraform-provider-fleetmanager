// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/extenda/fleet-manager-sdk-go/fleetmanager/models"
)

// ListSoftwareVersionsReader is a Reader for the ListSoftwareVersions structure.
type ListSoftwareVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSoftwareVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListSoftwareVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListSoftwareVersionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListSoftwareVersionsOK creates a ListSoftwareVersionsOK with default headers values
func NewListSoftwareVersionsOK() *ListSoftwareVersionsOK {
	return &ListSoftwareVersionsOK{}
}

/*ListSoftwareVersionsOK handles this case with default header values.

OK
*/
type ListSoftwareVersionsOK struct {
	Payload *models.SoftwareVersions
}

func (o *ListSoftwareVersionsOK) Error() string {
	return fmt.Sprintf("[GET /software/package/{packageId}/version][%d] listSoftwareVersionsOK  %+v", 200, o.Payload)
}

func (o *ListSoftwareVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SoftwareVersions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSoftwareVersionsBadRequest creates a ListSoftwareVersionsBadRequest with default headers values
func NewListSoftwareVersionsBadRequest() *ListSoftwareVersionsBadRequest {
	return &ListSoftwareVersionsBadRequest{}
}

/*ListSoftwareVersionsBadRequest handles this case with default header values.

Bad Request
*/
type ListSoftwareVersionsBadRequest struct {
	Payload *models.Error
}

func (o *ListSoftwareVersionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /software/package/{packageId}/version][%d] listSoftwareVersionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListSoftwareVersionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
